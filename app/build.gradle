apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'dagger.hilt.android.plugin'
apply from: "$project.rootDir/compose.gradle"
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'
//apply from: "../ktlint.gradle"

android {
    signingConfigs {
        release {
//            def props = new Properties()
//            def fileInputStream = new FileInputStream(file('signing.properties'))
//            props.load(fileInputStream)
//            fileInputStream.close()
//            storeFile = file(props['storeFilePath'])
//            storePassword = props['storePassword']
//            keyAlias = props['keyAlias']
//            keyPassword = props['keyPassword']

            storeFile=file('/Users/viswanathan.kp/Desktop/DFM-keystore')
            storePassword='V!$351289*'
            keyAlias='key0'
            keyPassword='V!$351289*'
        }
    }
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    def localVersionCode = 0
    def localVersionName = "0"
    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

//        def code = versionProps['VERSION_CODE'].toInteger() + 1
//        versionProps['VERSION_CODE'] = code.toString()

        def value = 0

        def runTasks = gradle.startParameter.taskNames
        if ('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks) {
            value = 1;
        }

        def versionMajor = 1
        def versionMinor = 0
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        def releaseName = "${versionMajor}.${versionMinor}.${versionPatch}(${versionBuild})"
        localVersionName = releaseName

        defaultConfig {
            applicationId "com.viswa.dfm"
            minSdkVersion 21
            targetSdkVersion 30
            versionCode versionBuild
            versionName releaseName
            consumerProguardFiles 'proguard-rules.pro'
            vectorDrawables.useSupportLibrary = true
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

            resConfigs "en", "fr"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    def buildDate = new Date().format('dd-MM')
    setProperty("archivesBaseName", "ddfm-$localVersionName-$buildDate")

    buildFeatures {
        dataBinding = true
    }

    lintOptions {
        warningsAsErrors false
        abortOnError false
        disable 'InvalidPackage', 'VectorPath'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        kotlinOptions {
            jvmTarget = "1.8"
            suppressWarnings = true
        }
    }

    buildTypes {

        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            resValue "string", "app_name", "DDFM Debug"
        }

        releaseDebug {
            debuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            applicationIdSuffix '.releaseDebug'
            resValue "string", "app_name", "DDFM RD"
        }

        release {
            minifyEnabled true
            resValue "string", "app_name", "DDFM"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    dynamicFeatures = [':feature', ':chatfeature']

    packagingOptions {
        exclude("META-INF/**.version")
    }

    androidExtensions {
        experimental = true
        features = ["parcelize"]
    }
}

kapt {
    correctErrorTypes = true
    useBuildCache = true
    javacOptions {
        option("-Xmaxerrs", 500)
    }
}



dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(':core')
    implementation project(':coreUi')
    implementation project(':deeplink')


    if (gradle.ext.useNetworkLocal) {
        api project(':network')
    } else {
        api "DDFM:network:1.0.1"
    }

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0-alpha02'
    implementation 'androidx.appcompat:appcompat:1.3.0-alpha02'
    implementation "androidx.fragment:fragment-ktx:1.3.0-alpha08"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'

    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.0-alpha07"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0-alpha07"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.3.0-alpha07"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:2.3.0-alpha07"

    implementation "com.google.dagger:hilt-android:2.29.1-alpha"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt "com.google.dagger:hilt-compiler:2.29.1-alpha"

    implementation 'androidx.hilt:hilt-common:1.0.0-alpha02'
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02'
//    implementation 'androidx.hilt:hilt-work:1.0.0-alpha02'
    kapt 'androidx.hilt:hilt-compiler:1.0.0-alpha02'

    implementation "androidx.navigation:navigation-fragment-ktx:2.3.0"
    implementation "androidx.navigation:navigation-ui-ktx:2.3.0"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:2.3.0"

    implementation 'com.jakewharton.timber:timber:4.7.1'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'com.google.android.material:material:1.3.0-alpha02'

    // Recommended: Add the Firebase SDK for Google Analytics.
    implementation 'com.google.firebase:firebase-analytics-ktx:17.5.0'
    implementation 'com.google.firebase:firebase-analytics'
    // Add the Firebase Crashlytics SDK.
    implementation 'com.google.firebase:firebase-crashlytics-ktx:17.2.2'

    implementation 'com.google.firebase:firebase-analytics-ktx:17.5.0'

}