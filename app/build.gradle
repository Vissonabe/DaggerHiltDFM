apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'dagger.hilt.android.plugin'
apply from: "$project.rootDir/compose.gradle"
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'
apply from: "$project.rootDir/compose.gradle"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    def localVersionName = "0"
    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def value = 0

        def runTasks = gradle.startParameter.taskNames
        if ('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks) {
            value = 1;
        }

        def versionMajor = 1
        def versionMinor = 0
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value
        def releaseName = "${versionMajor}.${versionMinor}.${versionPatch}(${versionBuild})"

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()
        versionProps['VERSION_TAG'] = releaseName.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        localVersionName = releaseName

        defaultConfig {
            applicationId "com.viswa.dfm"
            minSdkVersion 21
            targetSdkVersion 30
            versionCode versionBuild
            versionName releaseName
            consumerProguardFiles 'proguard-rules.pro'
            vectorDrawables.useSupportLibrary = true
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

            resConfigs "en", "fr"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    def runTasks = gradle.startParameter.taskNames
    println("printing task name  ${gradle.startParameter.taskNames}")
    if ('bundleRelease' in runTasks) {
        setProperty("archivesBaseName", "ddfm")
    } else {
        def buildDate = new Date().format('dd-MM')
        setProperty("archivesBaseName", "ddfm-$localVersionName-$buildDate")
    }

    buildFeatures {
        dataBinding = true
        compose true
    }

    lintOptions {
        warningsAsErrors false
        abortOnError false
        disable 'InvalidPackage', 'VectorPath'
    }

    composeOptions {
        kotlinCompilerVersion kotlin_version
        kotlinCompilerExtensionVersion compose_version
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        kotlinOptions {
            jvmTarget = "1.8"
            suppressWarnings = true
        }
    }

    buildTypes {

        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            resValue "string", "app_name", "DDFM Debug"
        }

        releaseDebug {
            debuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix '.releaseDebug'
            resValue "string", "app_name", "DDFM RD"
        }

        release {
            minifyEnabled true
            resValue "string", "app_name", "DDFM"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dynamicFeatures = [':feature', ':chatfeature']

    packagingOptions {
        exclude("META-INF/**.version")
    }

    androidExtensions {
        experimental = true
        features = ["parcelize"]
    }
}

kapt {
    correctErrorTypes = true
    useBuildCache = true
    javacOptions {
        option("-Xmaxerrs", 500)
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(':core')

    if (gradle.ext.useNetworkLocal) {
        api project(':network')
    } else {
        api "DDFM:network:1.0.1"
    }

    if (gradle.ext.useCoreUiLocal) {
        api project(':coreUi')
    } else {
        api "modules:coreUi:1.0.1"
    }

    if (gradle.ext.useDeeplinkLocal) {
        api project(':deeplink')
    } else {
        api "modules:deeplink:1.0.1"
    }

    implementation libraries.kotlinstdlib
    implementation libraries.corektx
    implementation libraries.appcompat
    implementation libraries.fragmentktx
    implementation libraries.constraintlayout
    implementation libraries.legacy_support_v4
    implementation libraries.androidMaterial
    implementation libraries.activityKtx

    //lifecycle
    implementation libraries.lifecyclelivedataktx
    implementation libraries.lifecycleviewmodelktx
    implementation libraries.lifecycleCommonJava8
    implementation libraries.lifecycleViewmodelSavedstate

    //hilt
    kapt libraries.hilt_compiler
    implementation libraries.hilt_android
    implementation libraries.hilt_common
    implementation libraries.hilt_lifecycle_viewmodel
    kapt libraries.hilt_compiler_ktx

    //navigation
    implementation libraries.navigation_fragment_ktx
    implementation libraries.navigation_ui_ktx
    implementation libraries.navigation_dynamic

    //timber
    implementation libraries.timber

    //leakcanary
    debugImplementation libraries.leakcanary

    //testing
    testImplementation libraries.junit
    androidTestImplementation libraries.junitExt
    androidTestImplementation libraries.junitEspresso

    // Recommended: Add the Firebase SDK for Google Analytics.
    implementation libraries.firebaseAnalyticsKtx
    implementation libraries.firebaseAnalytics
    implementation libraries.firebaseCrashlytics
    implementation libraries.firebaseCrashlyticsKtx

    //retrofit
    implementation libraries.accompanistcoil
    implementation libraries.retrofit
    implementation libraries.moshi
    implementation libraries.moshikotlin
    implementation libraries.moshiconverter
    implementation libraries.loginterceptor

}